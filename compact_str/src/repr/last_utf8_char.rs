use alloc::string::String;

use super::MAX_SIZE;

/// [`LastUtf8Char`] is an unsigned 8-bit integer data type that has a valid range of `[0, 216]`.
/// Excluding `[217, 255]` allows the Rust compiler to use these values as niches.
#[derive(Copy, Clone, Debug)]
#[repr(u8)]
pub enum LastUtf8Char {
    // single character, ASCII:
    V0 = 0,
    V1 = 1,
    V2 = 2,
    V3 = 3,
    V4 = 4,
    V5 = 5,
    V6 = 6,
    V7 = 7,
    V8 = 8,
    V9 = 9,
    V10 = 10,
    V11 = 11,
    V12 = 12,
    V13 = 13,
    V14 = 14,
    V15 = 15,
    V16 = 16,
    V17 = 17,
    V18 = 18,
    V19 = 19,
    V20 = 20,
    V21 = 21,
    V22 = 22,
    V23 = 23,
    V24 = 24,
    V25 = 25,
    V26 = 26,
    V27 = 27,
    V28 = 28,
    V29 = 29,
    V30 = 30,
    V31 = 31,
    V32 = 32,
    V33 = 33,
    V34 = 34,
    V35 = 35,
    V36 = 36,
    V37 = 37,
    V38 = 38,
    V39 = 39,
    V40 = 40,
    V41 = 41,
    V42 = 42,
    V43 = 43,
    V44 = 44,
    V45 = 45,
    V46 = 46,
    V47 = 47,
    V48 = 48,
    V49 = 49,
    V50 = 50,
    V51 = 51,
    V52 = 52,
    V53 = 53,
    V54 = 54,
    V55 = 55,
    V56 = 56,
    V57 = 57,
    V58 = 58,
    V59 = 59,
    V60 = 60,
    V61 = 61,
    V62 = 62,
    V63 = 63,
    V64 = 64,
    V65 = 65,
    V66 = 66,
    V67 = 67,
    V68 = 68,
    V69 = 69,
    V70 = 70,
    V71 = 71,
    V72 = 72,
    V73 = 73,
    V74 = 74,
    V75 = 75,
    V76 = 76,
    V77 = 77,
    V78 = 78,
    V79 = 79,
    V80 = 80,
    V81 = 81,
    V82 = 82,
    V83 = 83,
    V84 = 84,
    V85 = 85,
    V86 = 86,
    V87 = 87,
    V88 = 88,
    V89 = 89,
    V90 = 90,
    V91 = 91,
    V92 = 92,
    V93 = 93,
    V94 = 94,
    V95 = 95,
    V96 = 96,
    V97 = 97,
    V98 = 98,
    V99 = 99,
    V100 = 100,
    V101 = 101,
    V102 = 102,
    V103 = 103,
    V104 = 104,
    V105 = 105,
    V106 = 106,
    V107 = 107,
    V108 = 108,
    V109 = 109,
    V110 = 110,
    V111 = 111,
    V112 = 112,
    V113 = 113,
    V114 = 114,
    V115 = 115,
    V116 = 116,
    V117 = 117,
    V118 = 118,
    V119 = 119,
    V120 = 120,
    V121 = 121,
    V122 = 122,
    V123 = 123,
    V124 = 124,
    V125 = 125,
    V126 = 126,
    V127 = 127,

    // trailing byte in a multi-byte UTF-8 sequence
    V128 = 128,
    V129 = 129,
    V130 = 130,
    V131 = 131,
    V132 = 132,
    V133 = 133,
    V134 = 134,
    V135 = 135,
    V136 = 136,
    V137 = 137,
    V138 = 138,
    V139 = 139,
    V140 = 140,
    V141 = 141,
    V142 = 142,
    V143 = 143,
    V144 = 144,
    V145 = 145,
    V146 = 146,
    V147 = 147,
    V148 = 148,
    V149 = 149,
    V150 = 150,
    V151 = 151,
    V152 = 152,
    V153 = 153,
    V154 = 154,
    V155 = 155,
    V156 = 156,
    V157 = 157,
    V158 = 158,
    V159 = 159,
    V160 = 160,
    V161 = 161,
    V162 = 162,
    V163 = 163,
    V164 = 164,
    V165 = 165,
    V166 = 166,
    V167 = 167,
    V168 = 168,
    V169 = 169,
    V170 = 170,
    V171 = 171,
    V172 = 172,
    V173 = 173,
    V174 = 174,
    V175 = 175,
    V176 = 176,
    V177 = 177,
    V178 = 178,
    V179 = 179,
    V180 = 180,
    V181 = 181,
    V182 = 182,
    V183 = 183,
    V184 = 184,
    V185 = 185,
    V186 = 186,
    V187 = 187,
    V188 = 188,
    V189 = 189,
    V190 = 190,
    V191 = 191,

    // Cannot be last character of a UTF-8 sequence (leading byte of a sequence)
    // V192 .. V244,
    // Can never occur in UTF-8 (start for a codepoint > U+10FFFF)
    // V245 .. 255,

    // length marker:
    L0 = 192,
    L1 = 193,
    L2 = 194,
    L3 = 195,
    L4 = 196,
    L5 = 197,
    L6 = 198,
    L7 = 199,
    L8 = 200,
    L9 = 201,
    L10 = 202,
    L11 = 203,
    L12 = 204,
    L13 = 205,
    L14 = 206,
    L15 = 207,
    L16 = 208,
    L17 = 209,
    L18 = 210,
    L19 = 211,
    L20 = 212,
    L21 = 213,
    L22 = 214,
    L23 = 215,
}

impl LastUtf8Char {
    #[inline]
    pub(crate) const fn from_utf8_byte(byte: u8) -> Self {
        match byte {
            0 => LastUtf8Char::V0,
            1 => LastUtf8Char::V1,
            2 => LastUtf8Char::V2,
            3 => LastUtf8Char::V3,
            4 => LastUtf8Char::V4,
            5 => LastUtf8Char::V5,
            6 => LastUtf8Char::V6,
            7 => LastUtf8Char::V7,
            8 => LastUtf8Char::V8,
            9 => LastUtf8Char::V9,
            10 => LastUtf8Char::V10,
            11 => LastUtf8Char::V11,
            12 => LastUtf8Char::V12,
            13 => LastUtf8Char::V13,
            14 => LastUtf8Char::V14,
            15 => LastUtf8Char::V15,
            16 => LastUtf8Char::V16,
            17 => LastUtf8Char::V17,
            18 => LastUtf8Char::V18,
            19 => LastUtf8Char::V19,
            20 => LastUtf8Char::V20,
            21 => LastUtf8Char::V21,
            22 => LastUtf8Char::V22,
            23 => LastUtf8Char::V23,
            24 => LastUtf8Char::V24,
            25 => LastUtf8Char::V25,
            26 => LastUtf8Char::V26,
            27 => LastUtf8Char::V27,
            28 => LastUtf8Char::V28,
            29 => LastUtf8Char::V29,
            30 => LastUtf8Char::V30,
            31 => LastUtf8Char::V31,
            32 => LastUtf8Char::V32,
            33 => LastUtf8Char::V33,
            34 => LastUtf8Char::V34,
            35 => LastUtf8Char::V35,
            36 => LastUtf8Char::V36,
            37 => LastUtf8Char::V37,
            38 => LastUtf8Char::V38,
            39 => LastUtf8Char::V39,
            40 => LastUtf8Char::V40,
            41 => LastUtf8Char::V41,
            42 => LastUtf8Char::V42,
            43 => LastUtf8Char::V43,
            44 => LastUtf8Char::V44,
            45 => LastUtf8Char::V45,
            46 => LastUtf8Char::V46,
            47 => LastUtf8Char::V47,
            48 => LastUtf8Char::V48,
            49 => LastUtf8Char::V49,
            50 => LastUtf8Char::V50,
            51 => LastUtf8Char::V51,
            52 => LastUtf8Char::V52,
            53 => LastUtf8Char::V53,
            54 => LastUtf8Char::V54,
            55 => LastUtf8Char::V55,
            56 => LastUtf8Char::V56,
            57 => LastUtf8Char::V57,
            58 => LastUtf8Char::V58,
            59 => LastUtf8Char::V59,
            60 => LastUtf8Char::V60,
            61 => LastUtf8Char::V61,
            62 => LastUtf8Char::V62,
            63 => LastUtf8Char::V63,
            64 => LastUtf8Char::V64,
            65 => LastUtf8Char::V65,
            66 => LastUtf8Char::V66,
            67 => LastUtf8Char::V67,
            68 => LastUtf8Char::V68,
            69 => LastUtf8Char::V69,
            70 => LastUtf8Char::V70,
            71 => LastUtf8Char::V71,
            72 => LastUtf8Char::V72,
            73 => LastUtf8Char::V73,
            74 => LastUtf8Char::V74,
            75 => LastUtf8Char::V75,
            76 => LastUtf8Char::V76,
            77 => LastUtf8Char::V77,
            78 => LastUtf8Char::V78,
            79 => LastUtf8Char::V79,
            80 => LastUtf8Char::V80,
            81 => LastUtf8Char::V81,
            82 => LastUtf8Char::V82,
            83 => LastUtf8Char::V83,
            84 => LastUtf8Char::V84,
            85 => LastUtf8Char::V85,
            86 => LastUtf8Char::V86,
            87 => LastUtf8Char::V87,
            88 => LastUtf8Char::V88,
            89 => LastUtf8Char::V89,
            90 => LastUtf8Char::V90,
            91 => LastUtf8Char::V91,
            92 => LastUtf8Char::V92,
            93 => LastUtf8Char::V93,
            94 => LastUtf8Char::V94,
            95 => LastUtf8Char::V95,
            96 => LastUtf8Char::V96,
            97 => LastUtf8Char::V97,
            98 => LastUtf8Char::V98,
            99 => LastUtf8Char::V99,
            100 => LastUtf8Char::V100,
            101 => LastUtf8Char::V101,
            102 => LastUtf8Char::V102,
            103 => LastUtf8Char::V103,
            104 => LastUtf8Char::V104,
            105 => LastUtf8Char::V105,
            106 => LastUtf8Char::V106,
            107 => LastUtf8Char::V107,
            108 => LastUtf8Char::V108,
            109 => LastUtf8Char::V109,
            110 => LastUtf8Char::V110,
            111 => LastUtf8Char::V111,
            112 => LastUtf8Char::V112,
            113 => LastUtf8Char::V113,
            114 => LastUtf8Char::V114,
            115 => LastUtf8Char::V115,
            116 => LastUtf8Char::V116,
            117 => LastUtf8Char::V117,
            118 => LastUtf8Char::V118,
            119 => LastUtf8Char::V119,
            120 => LastUtf8Char::V120,
            121 => LastUtf8Char::V121,
            122 => LastUtf8Char::V122,
            123 => LastUtf8Char::V123,
            124 => LastUtf8Char::V124,
            125 => LastUtf8Char::V125,
            126 => LastUtf8Char::V126,
            127 => LastUtf8Char::V127,
            128 => LastUtf8Char::V128,
            129 => LastUtf8Char::V129,
            130 => LastUtf8Char::V130,
            131 => LastUtf8Char::V131,
            132 => LastUtf8Char::V132,
            133 => LastUtf8Char::V133,
            134 => LastUtf8Char::V134,
            135 => LastUtf8Char::V135,
            136 => LastUtf8Char::V136,
            137 => LastUtf8Char::V137,
            138 => LastUtf8Char::V138,
            139 => LastUtf8Char::V139,
            140 => LastUtf8Char::V140,
            141 => LastUtf8Char::V141,
            142 => LastUtf8Char::V142,
            143 => LastUtf8Char::V143,
            144 => LastUtf8Char::V144,
            145 => LastUtf8Char::V145,
            146 => LastUtf8Char::V146,
            147 => LastUtf8Char::V147,
            148 => LastUtf8Char::V148,
            149 => LastUtf8Char::V149,
            150 => LastUtf8Char::V150,
            151 => LastUtf8Char::V151,
            152 => LastUtf8Char::V152,
            153 => LastUtf8Char::V153,
            154 => LastUtf8Char::V154,
            155 => LastUtf8Char::V155,
            156 => LastUtf8Char::V156,
            157 => LastUtf8Char::V157,
            158 => LastUtf8Char::V158,
            159 => LastUtf8Char::V159,
            160 => LastUtf8Char::V160,
            161 => LastUtf8Char::V161,
            162 => LastUtf8Char::V162,
            163 => LastUtf8Char::V163,
            164 => LastUtf8Char::V164,
            165 => LastUtf8Char::V165,
            166 => LastUtf8Char::V166,
            167 => LastUtf8Char::V167,
            168 => LastUtf8Char::V168,
            169 => LastUtf8Char::V169,
            170 => LastUtf8Char::V170,
            171 => LastUtf8Char::V171,
            172 => LastUtf8Char::V172,
            173 => LastUtf8Char::V173,
            174 => LastUtf8Char::V174,
            175 => LastUtf8Char::V175,
            176 => LastUtf8Char::V176,
            177 => LastUtf8Char::V177,
            178 => LastUtf8Char::V178,
            179 => LastUtf8Char::V179,
            180 => LastUtf8Char::V180,
            181 => LastUtf8Char::V181,
            182 => LastUtf8Char::V182,
            183 => LastUtf8Char::V183,
            184 => LastUtf8Char::V184,
            185 => LastUtf8Char::V185,
            186 => LastUtf8Char::V186,
            187 => LastUtf8Char::V187,
            188 => LastUtf8Char::V188,
            189 => LastUtf8Char::V189,
            190 => LastUtf8Char::V190,
            191 => LastUtf8Char::V191,
            _ => panic!("improper last byte for UTF-8 string"),
        }
    }

    #[inline]
    pub(crate) const fn from_len(len: usize) -> Self {
        match len {
            0 => LastUtf8Char::L0,
            1 => LastUtf8Char::L1,
            2 => LastUtf8Char::L2,
            3 => LastUtf8Char::L3,
            4 => LastUtf8Char::L4,
            5 => LastUtf8Char::L5,
            6 => LastUtf8Char::L6,
            7 => LastUtf8Char::L7,
            8 => LastUtf8Char::L8,
            9 => LastUtf8Char::L9,
            10 => LastUtf8Char::L10,
            11 => LastUtf8Char::L11,
            12 => LastUtf8Char::L12,
            13 => LastUtf8Char::L13,
            14 => LastUtf8Char::L14,
            15 => LastUtf8Char::L15,
            16 => LastUtf8Char::L16,
            17 => LastUtf8Char::L17,
            18 => LastUtf8Char::L18,
            19 => LastUtf8Char::L19,
            20 => LastUtf8Char::L20,
            21 => LastUtf8Char::L21,
            22 => LastUtf8Char::L22,
            23 => LastUtf8Char::L23,
            _ => panic!("len is too long"),
        }
    }

    #[inline]
    pub(crate) const fn as_len(self) -> usize {
        match self {
            LastUtf8Char::L0 => 0,
            LastUtf8Char::L1 => 1,
            LastUtf8Char::L2 => 2,
            LastUtf8Char::L3 => 3,
            LastUtf8Char::L4 => 4,
            LastUtf8Char::L5 => 5,
            LastUtf8Char::L6 => 6,
            LastUtf8Char::L7 => 7,
            LastUtf8Char::L8 => 8,
            LastUtf8Char::L9 => 9,
            LastUtf8Char::L10 => 10,
            LastUtf8Char::L11 => 11,
            LastUtf8Char::L12 => 12,
            LastUtf8Char::L13 => 13,
            LastUtf8Char::L14 => 14,
            LastUtf8Char::L15 => 15,
            LastUtf8Char::L16 => 16,
            LastUtf8Char::L17 => 17,
            LastUtf8Char::L18 => 18,
            LastUtf8Char::L19 => 19,
            LastUtf8Char::L20 => 20,
            LastUtf8Char::L21 => 21,
            LastUtf8Char::L22 => 22,
            LastUtf8Char::L23 => 23,
            _ => MAX_SIZE,
        }
    }
}

static_assertions::assert_eq_size!(LastUtf8Char, Option<LastUtf8Char>, u8);
static_assertions::const_assert!(core::mem::size_of::<String>() <= 24);
